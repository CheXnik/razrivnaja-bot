from aiogram.dispatcher import FSMContext

from loader import dp
from aiogram import types
from data.config import ADMIN_ID
from states.strings import Strings
from keyboards.default import markup_keyboard as kb
from utils.database import add_new_string


@dp.message_handler(user_id=ADMIN_ID, commands=['start'])
async def start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç —è –†–ñ–ê–ö–ò–ß botü§°')
    await message.answer('üèû–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä —Å –Ω–∏–º.\n\n'
                         'üìù_–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–≤–æ—é –Ω–∞–¥–ø–∏—Å—å ‚Äì –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏._',
                         parse_mode='Markdown',
                         reply_markup=kb.keyboard_admin)


@dp.message_handler(user_id=ADMIN_ID, text=['–î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑–ê—á–∫–æüåö'])
async def add_string(message: types.Message):
    await message.answer('–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—É—é —Ñ—Ä–∞–∑—É:', reply_markup=kb.keyboard_back)
    await Strings.new_strings.set()


@dp.message_handler(user_id=ADMIN_ID, commands=['add'])
async def add_string(message: types.Message):
    await message.answer('–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—É—é —Ñ—Ä–∞–∑—É:', reply_markup=kb.keyboard_back)
    await Strings.new_strings.set()


@dp.message_handler(state=Strings.new_strings)
async def get_string(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥‚Ü©Ô∏è':
        await message.answer('–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥üê∑', reply_markup=kb.keyboard_admin)
        await state.finish()
    else:
        add_new_string(message.text)
        await message.answer('–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=kb.keyboard_admin)
        await state.finish()
